{
  "permissions": {
    "allow": [
      "Bash(# Now let's split out the onProgress implementation from NRFDFUFlasher.js\n# First, let's create a patch of just the whitespace changes in NRFDFUFlasher.js\ngit diff --staged src/api/flash/NRFDFUFlasher.js > /tmp/nrfdfu_all_changes.patch\n\n# Create a file with only the whitespace changes (manual edits)\ncat > /tmp/nrfdfu_whitespace.patch << 'EOL'\ndiff --git a/src/api/flash/NRFDFUFlasher.js b/src/api/flash/NRFDFUFlasher.js\nindex e3384566..9bcc0d44 100644\n--- a/src/api/flash/NRFDFUFlasher.js\n+++ b/src/api/flash/NRFDFUFlasher.js\n@@ -39,7 +39,7 @@ const delay = (ms) => new Promise((res) => setTimeout(res, ms));\n  */\n const rebootToApplicationMode = async (port, device) => {\n   logger.debug(\"Rebooting to application mode\");\n-  \n+\n   // In Nordic DFU, the device will automatically reset to application mode\n   // after a successful firmware update, but we can force it here if needed\n   try {\n@@ -67,7 +67,7 @@ const rebootToApplicationMode = async (port, device) => {\n  */\n const flash = async (port, fileContents) => {\n   logger.info(\"Starting NRF DFU flash process\");\n-  \n+\n   return new Promise((resolve, reject) => {\n     (async () => {\n       try {\n@@ -112,7 +112,7 @@ const flash = async (port, fileContents) => {\n           logger.info(\"Starting firmware update...\");\n           await operation.start();\n           logger.info(\"Firmware update successful!\");\n-          \n+\n           // Wait for device to reboot\n           await delay(2000);\n           \n@@ -122,7 +122,7 @@ const flash = async (port, fileContents) => {\n           resolve();\n         } catch (error) {\n           logger.error(\"Error during firmware update\", { error });\n-          \n+\n           // Try to close the port even if the update failed\n           try {\n             await transport.close();\n@@ -140,4 +140,4 @@ const flash = async (port, fileContents) => {\n   });\n };\n \n-export const NRFDFUFlasher = { rebootToApplicationMode, flash };\n\\ No newline at end of file\n+export const NRFDFUFlasher = { rebootToApplicationMode, flash };\nEOL\n\n# Create a patch file with just the progress reporting implementation\ncat > /tmp/nrfdfu_progress.patch << 'EOL'\ndiff --git a/src/api/flash/NRFDFUFlasher.js b/src/api/flash/NRFDFUFlasher.js\nindex 9bcc0d44..5d8e9df3 100644\n--- a/src/api/flash/NRFDFUFlasher.js\n+++ b/src/api/flash/NRFDFUFlasher.js\n@@ -63,11 +63,17 @@ const rebootToApplicationMode = async (port, device) => {\n  * Flash firmware to a Nordic device using DFU protocol\n  * @param {SerialPort} port - WebSerial port object\n  * @param {ArrayBuffer} fileContents - Firmware file contents as ArrayBuffer\n+ * @param {Function} onProgress - Optional callback for progress updates (0-100)\n  * @returns {Promise<void>}\n  */\n-const flash = async (port, fileContents) => {\n+const flash = async (port, fileContents, onProgress) => {\n   logger.info(\"Starting NRF DFU flash process\");\n \n+  // Report initial progress\n+  if (onProgress) {\n+    onProgress(0);\n+  }\n+\n   return new Promise((resolve, reject) => {\n     (async () => {\n       try {\n@@ -81,6 +87,11 @@ const flash = async (port, fileContents) => {\n           }\n         }\n \n+        // Report progress - connection established\n+        if (onProgress) {\n+          onProgress(5);\n+        }\n+\n         // Open port with Nordic settings\n         try {\n           await port.open({ baudRate: NORDIC_BAUD_RATE });\n@@ -91,6 +102,11 @@ const flash = async (port, fileContents) => {\n           return;\n         }\n \n+        // Report progress - port opened\n+        if (onProgress) {\n+          onProgress(10);\n+        }\n+\n         // Parse firmware file (expecting a Nordic DFU .zip file)\n         let dfuUpdates;\n         try {\n@@ -103,8 +119,34 @@ const flash = async (port, fileContents) => {\n           return;\n         }\n \n+        // Report progress - firmware file parsed\n+        if (onProgress) {\n+          onProgress(20);\n+        }\n+\n         // Create transport and DFU operation\n         const transport = new DfuTransportWebSerial(port, DEFAULT_PRN);\n+\n+        // Set up progress reporting\n+        let lastProgress = 20;\n+        transport.onProgressChange = (progressInfo) => {\n+          if (onProgress) {\n+            // Calculate overall progress from 20-90%\n+            // progressInfo contains { offset, total } for the current operation\n+            if (progressInfo.total > 0) {\n+              const currentPartProgress = (progressInfo.offset / progressInfo.total) * 100;\n+              // Map the 0-100 range to 20-90 range for our overall progress\n+              const overallProgress = Math.floor(20 + currentPartProgress * 0.7);\n+\n+              // Only report if progress has changed significantly (avoid excessive updates)\n+              if (overallProgress > lastProgress) {\n+                lastProgress = overallProgress;\n+                onProgress(Math.min(90, overallProgress));\n+              }\n+            }\n+          }\n+        };\n+\n         const operation = new DfuOperation(dfuUpdates, transport);\n \n         // Start the update\n@@ -114,10 +156,20 @@ const flash = async (port, fileContents) => {\n           logger.info(\"Firmware update successful!\");\n \n           // Wait for device to reboot\n           await delay(2000);\n-          \n+\n           // Close the port\n           await transport.close();\n-          \n+\n+          // Report progress - firmware update complete\n+          if (onProgress) {\n+            onProgress(95);\n+          }\n+\n+          // Report progress - process complete\n+          if (onProgress) {\n+            onProgress(100);\n+          }\n+\n           resolve();\n         } catch (error) {\n           logger.error(\"Error during firmware update\", { error });\nEOL\n\n# Unstage NRFDFUFlasher.js for now\ngit reset HEAD src/api/flash/NRFDFUFlasher.js\n\n# Stage and commit the whitespace/formatting changes for all other files\ngit commit -m \"style(nrf-dfu): Fix whitespace and formatting in nRF DFU implementation files\n\n- Remove trailing whitespace in comments\n- Fix indentation issues\n- Normalize line spacing\n- Consistent formatting across NRF DFU files\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nCo-Authored-By: Claude <noreply@anthropic.com>\n\"\n\n# Now apply just the whitespace fixes to NRFDFUFlasher.js\ngit checkout -- src/api/flash/NRFDFUFlasher.js\npatch -p1 < /tmp/nrfdfu_whitespace.patch\ngit add src/api/flash/NRFDFUFlasher.js\n\n# Commit the whitespace changes\ngit commit -m \"style(nrf-dfu): Fix whitespace in NRFDFUFlasher.js\n\n- Remove trailing whitespace in comments\n- Consistent line endings\n- Fix indentation\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nCo-Authored-By: Claude <noreply@anthropic.com>\n\"\n\n# Now apply the progress reporting implementation\npatch -p1 < /tmp/nrfdfu_progress.patch\ngit add src/api/flash/NRFDFUFlasher.js\n\n# Commit the progress implementation\ngit commit -m \"feat(nrf-dfu): Add progress reporting to NRFDFUFlasher\n\n- Add onProgress callback parameter to flash function\n- Implement progress reporting at various stages (0%, 5%, 10%, 20%, 95%, 100%)\n- Add detailed progress tracking during firmware upload (20-90%)\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nCo-Authored-By: Claude <noreply@anthropic.com>\n\"\n\n# Add and commit yarn.lock\ngit add yarn.lock\ngit commit -m \"chore(deps): Update dependencies for nRF DFU support\n\n- Add jszip and related dependencies\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nCo-Authored-By: Claude <noreply@anthropic.com>\n\"\n\n# Show all commits\ngit log -n 5 --pretty=format:\"%h %s\")",
      "Bash(chmod:*)",
      "Bash(file:*)",
      "Bash(find:*)",
      "Bash(git add\ngit add\ngit add\ngit diff\ngit commit\ngit show:*)",
      "Bash(git add:*)",
      "Bash(git diff:*)",
      "Bash(git status:*)",
      "Bash(grep:*)",
      "Bash(head:*)",
      "Bash(hexdump:*)",
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(npm run lint:js:*)",
      "Bash(npm run prettier:*)",
      "Bash(tail:*)",
      "Bash(unzip:*)",
      "Bash(y)",
      "Bash(yarn build)",
      "Bash(yarn lint:js)",
      "Bash(git checkout:*)",
      "Bash(awk:*)"
    ],
    "deny": []
  }
}